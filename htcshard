#!/usr/bin/python

import argparse
import sys
import os
import os.path
import re
import StringIO
import tarfile
import warnings
import time
import imp
import tempfile
from dask.distributed import Client
from contextlib import closing
import htpar

def read_file(fname):
    with open(fname) as stream:
        return stream.read()

def load_source(source):
    global pmod
    with tempfile.NamedTemporaryFile(suffix=".py") as stream:
        stream.write(source)
        stream.flush()
        pmod = imp.load_source("processing_mod", stream.name)

def input_records(url):
    for shard in htpar.path_shards(url):
        for record in htpar.tarrecords(shard):
            yield record

if __name__=="__main__":
    parser = argparse.ArgumentParser("Mapping sharded tar files.")
    parser.add_argument("-p", "--process", default="process_sample.py")
    parser.add_argument("-d", "--dask", default=None)
    parser.add_argument("-k", "--keys", default="base_plus_ext")
    parser.add_argument("inputs")
    parser.add_argument("outputs")
    args = parser.parse_args()

    source = read_File(args.process)
    client.run(load_source, source)

    ## Function used for splitting tar file names into record key and sample keys.
    keys = htpar.get_keyfun(args.keys)
    assert callable(keys)

    ## Load the record processing code.
    with open(args.process) as stream:
        source = stream.read()
    pmod = imp.load_source("processing_mod", stream.name)
    assert "process_sample" in dir(pmod), \
        "{} does not define process_sample function".format(args.process)


    ## Compute the set of paths to iterate over.
    ifmt, ninputs = split_sharded_path(args.inputs)
    ofmt, noutputs = split_sharded_path(args.outputs)
    assert ninputs == noutputs
    if ninputs is None:
        inputs = [ifmt]
        outputs = [ofmt]
    else:
        inputs = [ifmt % i for i in range(ninputs)]
        outputs = [ofmt % i for i in range(noutputs)]

    ## Map over the path pairs in parallel.
    client = Client(args.dask)
    print client
    result = client.map(process_paths, inputs, outputs,
                        [source]*len(inputs),
                        [keys]*len(inputs))

    ## Wait for results.
    print client.gather(result)
